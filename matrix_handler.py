import numpy as np
import math
import csv


def make_matrix(m: int, lambda_, mu):
    out = np.tile(np.zeros(m+1), (m+1,1))

    pl = np.exp(-lambda_)
    pm = np.exp(-mu)

    for i in range(m+1):
        for j in range(m+1):
            if i == m:
                out[i][j] = math.comb(m, j) * (1-pl)**(m-j) * pl**j
            if j == 0 and i != m:
                out[i][j] = (1-pl)**i * pm
            if j == i+1 and i != m:
                out[i][j] = pl**i * (1-pm)
            if i >= j > 0 and i != m:
                out[i][j] = math.comb(i, j) * pl**j * (1-pl)**(i-j) * pm \
                            + math.comb(i, j-1) * pl**(j-1) * (1-pl)**(i-(j-1)) * (1-pm)

    return np.matrix(out)


def read_model(filename: str, params: dict) -> np.array:
    """
    Code based on function written by Mariia Turchina
    (https://github.com/thatmariia/stochastic-modelling/blob/master/model_python/ModelsSetup.py).
    Reads a matrix from .csv file.
    :param filename: string - .csv location
    :param params: dictionary[string] - expresses elements of csv in terms of {mu, sigma, k}
    :return: square probability matrix with variable names
    """
    filename += ".csv"

    shape = (0, 0)
    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        for row in reader:
            shape = (shape[0] + 1, shape[1])

            if len(row) > shape[1]:
                shape = (shape[0], len(row))

    assert shape[0] == shape[1], "The matrix isn't square"

    model_matrix = []

    with open(filename) as csvfile:
        reader = csv.reader(csvfile, delimiter=';')
        for row in reader:
            model_row = []
            for cell in row:
                for key in params.keys():
                    cell = cell.replace(key, params[key])
                # model_cell = eval(cell, d)
                model_row.append(cell)
            model_matrix.append(np.array(model_row))

    return np.array(model_matrix)


def evaluate_model(matrix: np.array, params: dict) -> np.matrix:
    """
    Code based on function written by Mariia Turchina
    (https://github.com/thatmariia/stochastic-modelling/blob/master/model_python/ModelsSetup.py).
    Reads a matrix from .csv file.
    :param matrix: np.array[np.array[string]] - matrix of variable names
    :param params: map from variable names to values
    :return: square probability matrix evaluated with values at params
    """

    model_matrix = []

    for row in matrix:
        model_row = []
        for cell in row:
            model_cell = eval(cell, params)
            model_row.append(model_cell)
        model_matrix.append(np.array(model_row))

    return np.asmatrix(np.array(model_matrix))

class MarkovChainModel:
    def __init__(self, matrix_path="", params={}, values={}):
        """
        Class wrapper for handling calculations related to Markov-chains generated by runs rules on control charts.
        IMPORTANT: "k" is reserved for calculations involving control limits and can therefore not be
        passed as a key of values.
        :param matrix_path: Path to file containing matrix
        :param params: Dictionary converting values inside matrix to ways to calculate them e.g. {"p0": "phi(k)-phi(-k)"}
        :param values: Dictionary for evaluating the values of params e.g. {"phi": stats.norm.cdf}
        """
        self.params = params
        self.values = values
        if matrix_path != "":
            self.matrix = evaluate_model(read_model(matrix_path, params), values)
            self.dim = self.matrix.shape[0]
        else:
            self.matrix = []
            self.dim = 0


    def change_matrix(self, matrix):
        self.matrix = matrix
        self.dim = self.matrix.shape[0]
